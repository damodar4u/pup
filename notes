export TERM=xterm
stty rows 36 cols 150

sudo docker ps -qa | xargs -n1 sudo docker stop
sudo docker ps -qa | xargs -n1 sudo docker rm -v -f 


ubuntu@ip-172-31-35-7:~/codespaces/cs-puppet$ pwd
/home/ubuntu/codespaces/cs-puppet

edit docker-compose.yml file to change 
  node1:
    image: codespaces/puppet-node-centos-6:v0.1.3
    ports:
       - "81:8080"
    networks:
      - puppet
    container_name: node1
    domainname: codespaces.io
    hostname: node1
    restart: always

sudo docker ps
sudo docker kill 23223a34522a
sudo docker rm 23223a34522a



sudo systemctl start docker
sudo docker-compose up -d


sudo docker ps

sudo docker exec -it <container name> /bin/bash

root@puppet:/workspace# ssh devops@node1

[devops@node1 ~]$ sudo su

[root@node1 devops]# puppet agent -t
Info: Creating a new SSL key for node1.codespaces.io
Info: Caching certificate for ca
Info: csr_attributes file loading from /etc/puppetlabs/puppet/csr_attributes.yaml
Info: Creating a new SSL certificate request for node1.codespaces.io
Info: Certificate Request fingerprint (SHA256): 97:D9:C0:06:F1:F4:ED:6E:B7:0A:32:13:D6:09:AF:0D:53:72:52:2B:0F:C6:5D:2A:02:3C:B0:A3:07:CB:F4:11
Info: Caching certificate for ca
Exiting; no certificate found and waitforcert is disabled

ping puppet

puppet agent -t --server <puppetserver>

puppet cert list --all or -a

puppet cert list

root@puppet:/workspace# puppet cert sign node1.codespaces.io

Signing Certificate Request for:
  "node1.codespaces.io" (SHA256) 97:D9:C0:06:F1:F4:ED:6E:B7:0A:32:13:D6:09:AF:0D:53:72:52:2B:0F:C6:5D:2A:02:3C:B0:A3:07:CB:F4:11
Notice: Signed certificate request for node1.codespaces.io
Notice: Removing file Puppet::SSL::CertificateRequest node1.codespaces.io at '/etc/puppetlabs/puppet/ssl/ca/requests/node1.codespaces.io.pem'

root@puppet:/workspace# puppet cert sign --all or -a

regenerating certs for a particular node 

clean 
if run as root

/etc/puppetlabs/puppet/ssl/*

if run as user clean

/home/devops/.puppetlabs/etc/puppet/ssl/*

revoke cert from master 
puppet cert revoke <cert_name>

puppet cert clean <cert_name>

regenerate cert using 
puppet agent -t

*********
user { 'devops':
uid => '5001',
gid => '5001'
home => '/home/devops',
shell => '/bin/bash',
ensure => present
}
******


create user deploy 
packages (tree,git,ntp,wget,unzip)
start service ntp
remove user dojo
add file /etc/motd with content "XYZ"


password: 
openssl passwd -1

welcome

base.pp
*****

user { 'deploy':
uid => '5001',
home => '/home/deploy',
shell => '/bin/bash',
managehome => 'true',
ensure => present,
password => '$1$ExRhl.Vm$8PNMMINPSVFsZLHI8j.5n1'
}

package { 'tree':
ensure => installed
}

package { 'git':
}

package { ['wget','unzip','ntp']:
}

user { 'dojo':
ensure => absent,

}

service { 'ntp':
ensure => running,
enable => true
}

file { '/etc/motd':
owner => 'root',
group => 'root',
mode => '0644',
content => '
XYZ
abc
'
}

***
apt-get update
service ntp status

check for syntax error 
puppet parser validate base.pp 

standalone 
puppet apply


****
idempotence and convergence 

loads facts , clean cache , complie catalog, converge/apply, sends report back to  master


***
exec Guards (only_if, unless, creates (if file already exists do not create it again ),
refreshonly => true (by default the resource do not get executed, runs only if some other resource notifies it))


****
Modules, classes, ordering , node classification, notification and handling

Anatomy
manifests, files, templates, data, spec (unit testing), examples , metadata.json (who wrote the module, what goes inside the module ), 
README.md (documentation)

**********


modules are stored on puppet master

where do modules stored ?
master-code-dir: /etc/puppetlabs/code
master-code-dir: /workspace/code


cp -r /etc/puppetlabs/code /workspace/code
/etc/puppetlabs/puppetserver/conf.d/puppetserver.conf
restart

service puppetserver restart


*****
generate modules for tomcat and java module apply to node1 and node 2
create class to install java
create node definition to apply classes
create classes to install tomcat and start the service, apply
write classes to manage config files


puppet help module

module should be generated inside 
/workspace/code/environments/production/modules

puppet module generate --help
puppet module generate [--skip-interview] <name>
puppet module generate --skip-interview user-java 
puppet module generate --skip-interview user-tomcat

***
classes

default manifest init.pp

each manifest contains a class , a named container, which encomapses one or more resources
:: is added to class names to seperate the namespaces, to uniquely identify classes within the modules

modules >tomcat > manifests > {init.pp,xyz.pp,abc.pp}  
class tomcat::abc
class tomcat::xyz
class tomcat

Strategies
******
every single feature we add to an app should have its own class and inturn a manifest, gives fine grained control
on what to call and what to omoit

every single lifecycle of an app should get a manifest of its own (install, configure, start the service, )
init.pp, deploy.pp, ssl.pp, install.pp, config.pp, service.pp

https://github.com/puppetlabs/puppetlabs-ntp

****
tomcat::install
tomcat::config
tomcat::service

java::install

***
/workspace/code/environments/production/modules/java/manifests
install.pp


class java::install {
package { ["epel-release", "java-1.7.0-openjdk"]:
}
}


****
node definition resides inside 
/workspace/code/environments/production/manifests (webservers.pp, db.pp)

app.pp

node 'node1' {
include java::install
}

****
notify is a resource and a metaparameter 

app.pp

node 'node1' {
notify {"***** node1 block****":}
include java::install
}

****

/workspace/code/environments/production/manifests/app.pp

node 'node1' {
notify {"***** node1 block****":}
include java::install
}

node default {
notify {"checkpoint1":
message => "
default block applied
"
}
}

*******

ordering, notification and metaparams

package --> service (require package)
package(before service)  --> service

ordering with notification
  restart service if file chnages
  file (notify service)----> service
  file --> Service (subscribe for file change) 


resource chaining 

Package["nginx"] ~> File["nginx.conf"] ~> Service["nginx"] (tildea) // we can avoid require notify subscribe
can be applied to classes 


parameters of a resource [before , require, subscribe, notify], these params can be applied to any resource: Meta params

to list all meta params use 
puppet describe -sm package


***********

create tomcat and start service 

tomcat install (tomcat, tomcat-webapps)
tomcat service 
apply them to node1 (node definition)

/workspace/code/environments/production/modules/tomcat/manifests

install.pp

class tomcat::install {
package { ["tomcat", "tomcat-webapps"]:
}
}

service.pp

class tomcat::service {
service {"tomcat":
ensure => running,
enable => true
}
}

/workspace/code/environments/production/manifests/app.pp

node 'node1' {
notify {"***** node1 block****":}
include java::install
include tomcat::install
include tomcat::service
}

node default {
notify {"checkpoint1":
message => "
default block applied
"
}
}


ps -ef | grep tomcat

****
/workspace/code/environments/production/modules/tomcat/manifests

init.pp

move includes from node (app.pp) to init.pp inside tomcat module // simplifies node definition

********

static configuration files maintained under files
config.pp to copy file from puppet master to destination directory of node 

/etc/tomcat/tomcat.conf


/workspace/code/environments/production/modules/tomcat/files

TOMCAT_CFG_LOADED="1"                                                                                                           
                                                                                                                                
JAVA_HOME="/usr/lib/jvm/jre"
JAVA_OPTS="-Xms64m -Xmx128m -XX:MaxPermSize=128M -Djava.security.egd=file:/dev/./urandom"
                                                                                                                                
CATALINA_BASE="/usr/share/tomcat"                                                                                               
CATALINA_HOME="/usr/share/tomcat"                                                                                               
JASPER_HOME="/usr/share/tomcat"                                                                                                 
CATALINA_TMPDIR="/var/cache/tomcat/temp"                                                                                        
                                                                                                                                
                                                                                                                                
TOMCAT_USER="tomcat"                                                                                                            
                                                                                                                                
SECURITY_MANAGER="false"                                                                                                        
                                                                                                                                
SHUTDOWN_WAIT="30"                                                                                                              
                                                                                                                                
SHUTDOWN_VERBOSE="false"                                                                                                        
                                                                                                                                
CATALINA_PID="/var/run/tomcat.pid" 



/workspace/code/environments/production/modules/tomcat/manifests/config.pp

class tomcat::config {

file { '/etc/tomcat/tomcat.conf':
source => 'puppet:///modules/tomcat/tomcat.conf',
mode => '0644',
owner => 'tomcat',
group => 'tomcat',
notify => Service['tomcat']
}

}

/workspace/code/environments/production/modules/tomcat/manifests/init.pp

class tomcat {
include java::install
include tomcat::install
include tomcat::config
include tomcat::service
}


/workspace/code/environments/production/manifests/app.pp

node 'node1' {
include tomcat
notify {"***** node1 block****":}
}

node default {
notify {"checkpoint1":
message => "
default block applied
"
}
}

**********************

Paramters

code vs data, scoping, inheritance, facts

Same module can be used to configure differnt environments and different platforms
generic modules can be shared through puppetforge

code resides in (manifests/templates)

data (params) --> (user defined (hiera,  parametrised class (params.pp)), system defined (facter))

take properties out of module

modules define the default properties

we can selectively overwrite the default properties

we can overwrite the properties from node definition or from external dat sources (hiera)

defaults inside the module (params.pp (old way), hiera (newway))

params.pp 
(dedicated class to define data/params/properties)
can be used to write logic to seperate system specific properties


create a module called prefs

puppet module generate --skip-interview user-prefs


/workspace/code/environments/production/modules/prefs/manifests
params.pp

define params in params.pp and use it in resource (title or name, inside parameter values, inside template variables )

inheritence

params.pp --> init.pp (inherits xyz::params.pp)  --> config.pp (inherits xyz)

Parameterizong tomcat configs

pakage names
service name and properties
config file path, owner, group 

params.pp
 
class tomcat::params {
  $user  = 'tomcat'
  $group = 'tomcat'
  $config_path  = '/etc/tomcat/tomcat.conf'
  $packages  = [ 'tomcat', 'tomcat-webapps' ]
  $service_name = 'tomcat'
  $service_state = running
 
}


init.pp

class tomcat inherits tomcat::params{

include java::install
include tomcat::install
include tomcat::config
include tomcat::service
}

    
 install.pp
 
 class tomcat::install inherits tomcat{
    
    include java
    
    package { $::tomcat::packages:
      ensure   => installed, 
      require  => Package['epel-release']
    }
 
}

config.pp

class tomcat::config inherits tomcat{
 
  file { $::tomcat::config_path:
    source    => 'puppet:///modules/tomcat/tomcat.conf',
    owner    => $::tomcat::user, 
    group    => $::tomcat::group, 
    mode     => '0644',
    notify   => Service['tomcat'] 
  }
 
}
    

service.pp

class tomcat::service inherits tomcat{
 
   service { $::tomcat::service_name:
     ensure   => $::tomcat::service_state, 
     enable   => true,
     require  => Class['tomcat::install'],
   }
}
********
system defined params

facter os
facter os.family
facter os.distro.release.full
facter memory.system.total

******

Templates

dynamic files

erb syntax

server.xml
dev (memory=128mb, port 8081), staging (memory=1gb, port 8888), prod (memory=4b, port 8080)

parametrize the file (template) , data comes from with in the module or from node definition or from hiera

markers used to embed code 

<%=  %>   // if it is an expression use =
<%   %>   // evaluate coditionals, if it is conditional use this syntyax


memory = <%= @memory %>
port = <%= @port %>


templatize tomcat configs

/workspace/code/environments/production/modules/tomcat# mkdir templates
cd /workspace/code/environments/production/modules/tomcat/templates
 cp /workspace/code/environments/production/modules/tomcat/files/tomcat.conf /workspace/code/environments/production/modules/tomcat/templates/tomcat.conf.erb


tomcat.conf.erb

TOMCAT_CFG_LOADED=<%= @tomcat_cfg_loaded %>                                                                                             
JAVA_HOME=<%= @java_home %>
JAVA_OPTS=<%= @java_opts %>
CATALINA_BASE=<%= @catalina_base %>                                                                                               
CATALINA_HOME=<%= @catalina_home %>                                                                                              
JASPER_HOME=<%= @jasper_home %>                                                                                                
CATALINA_TMPDIR=<%= @catalina_tmpdir %>                                                                                        
TOMCAT_USER=<%= @user %>                                                                                                               
SECURITY_MANAGER=<%= @security_manager %>                       
SHUTDOWN_WAIT=<%= @shutdown_wait %>                                                                                                     
SHUTDOWN_VERBOSE=<%= @shutdown_verbose %>                                
CATALINA_PID=<%= @catalina_pid %> 
             
define the default params in params.pp

class tomcat::params {
  $user  = 'tomcat'
  $group = 'tomcat'
  $config_path  = '/etc/tomcat/tomcat.conf'
  $packages  = [ 'tomcat', 'tomcat-webapps' ]
  $service_name = 'tomcat'
  $service_state = running
  $tomcat_cfg_loaded = "1"
  $java_home = "/usr/lib/jvm/jre"
  $xms = "64m"
  $xmx = "128m"
  $maxpermsize = "128M"
  $java_opts = "-Xms${xms} -Xmx${xmx} -XX:MaxPermSize=${maxpermsize} -Djava.security.egd=file:/dev/./urandom"
  $catalina_base = "/usr/share/tomcat"  
  $catalina_home = "/usr/share/tomcat"
  $jasper_home = "/usr/share/tomcat"  
  $catalina_tmpdir = "/var/cache/tomcat/temp" 
  $security_manager = "false"
  $shutdown_wait = "30"
  $shutdown_verbose = "false"
  $catalina_pid = "/var/run/tomcat.pid"
}

config.pp

change source to content in config.pp to refer to template

class tomcat::config inherits tomcat{
  file { $::tomcat::config_path:
    #source    => 'puppet:///modules/tomcat/tomcat.conf',
    content  => template('tomcat/tomcat.conf.erb'),
    owner    => $::tomcat::user, 
    group    => $::tomcat::group, 
    mode     => '0644',
    notify   => Service['tomcat'] 
  }

}

*********************

Parameterized classess

providing data to modules from outside

params.pp module with default properties

design pattern --> params.pp sends parameters to init.pp which includes all classes, these included classes inherit init.pp

these params.pp is consumed by all classes via init.pp

in this design pattern, if a param is defined in init.pp and child class, the child classs take precedence over the init.pp 

class tomcat(
$user = $::tomcat::params::user,
$group = $::tomcat::params::group,
$config_path  = $::tomcat::params::config_path,
$packages  = $::tomcat::params::packages,
$service_name = $::tomcat::params::service_name,
$service_state = $::tomcat::params::service_state,
$tomcat_cfg_loaded = $::tomcat::params::tomcat_cfg_loaded,
$java_home = $::tomcat::params::java_home,
$xms = $::tomcat::xms,
$xmx = $::tomcat::params::xmx,
$maxpermsize = $::tomcat::params::maxpermsize,
$java_opts = "-Xms${xms} -Xmx${xmx} -XX:MaxPermSize=${maxpermsize} -Djava.security.egd=file:/dev/./urandom",
$catalina_base = $::tomcat::params::catalina_base,
$catalina_home = $::tomcat::params::catalina_home,
$jasper_home = $::tomcat::params::jasper_home,
$catalina_tmpdir = $::tomcat::params::catalina_tmpdir,
$security_manager = $::tomcat::params::security_manager,
$shutdown_wait = $::tomcat::params::shutdown_wait,
$shutdown_verbose = $::tomcat::params::shutdown_verbose,
$catalina_pid = $::tomcat::params::catalina_pid
)inherits tomcat::params{

include java::install
include tomcat::install
include tomcat::config
include tomcat::service

}
                                                                                                
during node classification we can overwrite parameters defined in parametrized classes

to pass params from node definition to parametrised classes remove include and add class

app.pp

change from
include tomcat

chnage to 


class {'::tomcat':
xms => "54m",
xmx => "80m"
}

***********


Environments

puppet agent -t 

defaults gets the code from production env 

how to create dev environment and add nodes in that env

cd /workspace/code/environments/
cp -r -p production dev
puppet agent -t --environment dev

how to make it permananent ?
add it a config file on the new node 
/etc/puppetlabs/puppet/puppet.conf

[agent]
  environment = 'dev'


 puppet agent -t


How to apply different configurations to each environment ?

2 version of a code running in 2 diff env 

hiera

************
r10k / code manager

How to deploy the code to different environemnets 

deployment of code from git to master using r10k

setup a control repo

https://github.com/puppetlabs/control-repo

manifests/sites.pp node definition

site/{roles/profiles}/manifests/

each branch in yopur environment represent a control repo


puppetfile 
what modules to deploy from where

install r10k in master
/opt/puppetlabs/puppet/bin/gem install r10k
/opt/puppetlabs/puppet/bin/r10k help


https://github.com/puppetlabs/r10k

setup control repo (which is what is read by r10 k,) we will define everything that we want to add


mkdir /etc/puppetlabs/r10k/

fork control repo to your account 

clone control repo from
puppetlabs/control-repo https://github.com/puppetlabs/control-repo

create /etc/puppetlabs/r10k/r10k.yaml, replace git repo, 


# The location to use for storing cached Git repos
:cachedir: '/var/cache/r10k'

# A list of git repositories to create
:sources:
  # This will clone the git repository and instantiate an environment per
  # branch in /etc/puppetlabs/code/environments
  :my-org:
    remote: 'YOUR_GIT_CONTROL_REPO_HERE'
    basedir: '/etc/puppetlabs/code/environments'
    

4502b5ac6032efcf16103a43677ebb1b


clone your control-repo
/etc/puppetlabs/r10k
git clone https://github.com/damodar4u/control-repo.git

This is where we define what to deploy to which env
/etc/puppetlabs/r10k/control-repo/Puppetfile


how to revision control our modules

create a new repo for each module 
java 
tomcat

puppet-module-tomcat


cd /workspace/code/environments/production/modules/tomcat
git init
git add *
git commit -a -m "importing tomcat module code"
git remote add origin https://github.com/damodar4u/puppet-module-tomcat.git
git push -u origin master


puppet-module-java

cd /workspace/code/environments/production/modules/java/
 git init
 git add *
 git commit -a -m "importing java module code"
git remote add origin https://github.com/damodar4u/puppet-module-java.git


Now write puppet file in control repo

/etc/puppetlabs/r10k/control-repo/Puppetfile

mod 'tomcat',
  :git    => 'https://github.com/damodar4u/puppet-module-tomcat.git'

mod 'java',
  :git    => 'https://github.com/damodar4u/puppet-module-java.git'


make sure you copy all hieradata and manifests into control repo and push it to git so we don't loose any thing when r10 is run

it copies code from git to controlrepo branches to respective environments

inside control repo
cd /etc/puppetlabs/r10k/control-repo
cp -r /workspace/code/environments/production/hieradata hieradata
cp -r /workspace/code/environments/production/manifests/* manifests/

git add hieradata/*
git add manifests/*

git commit -a -m "pushing all manifests and hieradata under envbironments to control repo"
git push origin production

now r10k it is going to deploy at specified location in r10k.yaml

deploy r10k using 

/opt/puppetlabs/puppet/bin/r10k deploy environment -v -p  // pushes all env 

to deploy specific env

/opt/puppetlabs/puppet/bin/r10k deploy environment <branch> -v -p // pushes only specified branch

************
deploy to dev env


cd /etc/puppetlabs/r10k/control-repo

git checkout -b dev

make chnages to Pupprtfile and app.pp to reflect correct modules and branches, hieradata to be deployed and to which nodes, remove site.pp

commit and push to dev branch



*******

%{fqdn}
%{environment}
%{network_eth0}
common


how to configure hiera

/etc/puppetlabs/puppet/hiera.yaml

this is where we define our heirarchy

each of the hierarchy represents a yaml or json file 
Any chnages to hiera.yaml , we should restrat puppet server

where do we define properties ?
for each hierarchy , there is a data directory


    ---                                                                                                                         
    :backends:                                                                                                                  
      - yaml                                                                                                                    
      - json                                                                                                                    
    :yaml:                                                                                                                      
      :datadir: "/workspace/code/environments/%{::environment}/hieradata"                                                       
                                                
    :hierarchy:                                                                                                                 
      - "nodes/%{::trusted.certname}"                                                                                           
      - "%{::environment}"                                                                                                      
      - "%{::osfamily}"                                                                                                         
      - "common"                                                                                                                

service puppetserver restart


how to make config specific to env

vi /workspace/code/environments/production/hieradata/common.yaml
---
tomcat::xms: "72"
tomcat::xmx: "300"
tomcat::maxpermsize: "100"


vi /workspace/code/environments/dev/hieradata/common.yaml
---
tomcat::xms: "72"
tomcat::xmx: "144"
tomcat::maxpermsize: "80"


run puppet agent

change the node definition by removing class tomcat and add include tomcat

"/workspace/code/environments/production/manifests/app.pp"
remove 

class {'tomcat':
xms => "50m"
}


Add

include tomcat

use hiera to classify the nodes 





































